{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf200
{\fonttbl\f0\froman\fcharset0 TimesNewRomanPSMT;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl340\sa240\partightenfactor0

\f0\fs29\fsmilli14667 \cf2 \expnd0\expndtw0\kerning0
Lastly, I present my final design. To meet the aim of balancing increased cohesion with reduced coupling and find an optimal system, I feel the best approach is to utilise the Model-View-Controller architecture. MVC architecture is designed with the principle of divide and conquer in mind. As I have discussed previously, this principle facilitates high cohesion, demonstrated by the separation of logic, view and control in this pattern; each level of the framework is separated, and focussed on its purpose. While the cohesive partitioning of the Facade is superior, this solution still provides functionally high cohesion.\
Similarly to my first solution, I have implemented an interface, EditorInterface, which falls under the View when incorporated into the MVC architecture. As before, this facilitates reduced coupling and is well suited to use within the MVC architecture. Coupling in this system can be reduced to only what is necessary for communication between the three components  of the system. The main limitation of this design is that its potentially unnecessarily bulky for the scope of the application required, however it sets the framework well to limit coupling and promote cohesion if the system were to be expanded to be more sophisticated.}